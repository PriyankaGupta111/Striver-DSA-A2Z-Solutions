class Solution {
    public String minWindow(String s, String t) {
         int i = 0, j = 0; // sliding window pointers
        int minLen = Integer.MAX_VALUE;
        int start = 0;
        int matched = 0;

        Map<Character, Integer> tMap = new HashMap<>();

        // Build frequency map for string t
        for (char c : t.toCharArray()) {
            tMap.put(c, tMap.getOrDefault(c, 0) + 1);
        }

        while (j < s.length()) {
            char endChar = s.charAt(j);
            if (tMap.containsKey(endChar)) {
                tMap.put(endChar, tMap.get(endChar) - 1);
                if (tMap.get(endChar) >= 0) {
                    matched++;
                }
            }

            // Try to shrink the window from the left
            while (matched == t.length()) {
                if (j - i + 1 < minLen) {
                    minLen = j - i + 1;
                    start = i;
                }

                char startChar = s.charAt(i);
                if (tMap.containsKey(startChar)) {
                    if (tMap.get(startChar) == 0) {
                        matched--;
                    }
                    tMap.put(startChar, tMap.get(startChar) + 1);
                }
                i++;
            }

            j++;
        }

        return minLen == Integer.MAX_VALUE ? "" : s.substring(start, start + minLen);
    }
}

