class Solution {
    public int subarraysWithKDistinct(int[] nums, int k) {
        return atMostK(nums, k) - atMostK(nums, k - 1);
    }

    // Helper function to count subarrays with at most k distinct integers
    private int atMostK(int[] nums, int k) {
        int n = nums.length;
        int i = 0, j = 0, result = 0;
        Map<Integer, Integer> map= new HashMap<>();

        while (j < n) {
           map.put(nums[j], map.getOrDefault(nums[j], 0) + 1);
              while(map.size()>k){
                map.put(nums[i], map.get(nums[i])-1);
                if(map.get(nums[i])==0)
                    map.remove(nums[i]);
                i++;
            }

            result += j-i + 1;
            j++;
        }

        return result;
    }
}
