class Solution {
    static List<Integer> firstNegInt(int arr[], int k) {
        // write code here
         List<Integer> result = new ArrayList<>();
        Deque<Integer> q = new ArrayDeque<>(); // Stores indexes of negative numbers
        int i = 0, j = 0;
        int n = arr.length;

        while (j < n) {
            // If current element is negative, store its index
            if (arr[j] < 0) {
                q.addLast(j);
            }

            // Check if we have hit window size
            if (j - i + 1 == k) {
                // If queue is not empty, front is first negative
                if (!q.isEmpty()) {
                    result.add(arr[q.peekFirst()]);
                   
                } else {
                    result.add(0);
                }

                // Before sliding, remove element going out of the window from queue
                if (!q.isEmpty() && q.peekFirst() == i) {
                    q.pollFirst();
                }

                i++; // shrink window from left
            }
            j++; // expand window from right
        }

        return result;
    }
}
