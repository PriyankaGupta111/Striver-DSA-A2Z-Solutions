/*recusive*/

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
       
 List<Integer> result = new ArrayList<>();
    preorder(root, result);
    return result;
}

private void preorder(TreeNode node, List<Integer> res) {
    if (node == null) return;
    res.add(node.val);            // Root
    preorder(node.left, res);     // Left
    preorder(node.right, res);    // Right
}
    }

/*  Iterative Preorder Traversal (Using Stack) */

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if (root == null) return result;

        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);

        while (!stack.isEmpty()) {
            TreeNode node = stack.pop();
            result.add(node.val); // Visit root

            if (node.right != null) stack.push(node.right); // Right child
            if (node.left != null) stack.push(node.left);   // Left child
        }

        return result;
    }
}
