class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
         if (root == null)
            return null;

        if (key < root.val) {
            root.left = deleteNode(root.left, key);  
        } else if (key > root.val) {
            root.right = deleteNode(root.right, key); 
        } else {
            // Node found
            // Case 1: No child or one child
            if (root.left == null) return root.right;
            if (root.right == null) return root.left;

            // Case 2: Two children
            TreeNode minNode = findMin(root.right); 
            root.val = minNode.val;
            root.right = deleteNode(root.right, minNode.val); 
        }

        return root;
    }

    // Helper function to find the minimum value node in a subtree
    private TreeNode findMin(TreeNode node) {
        while (node.left != null)
            node = node.left;
        return node;
    }
}
