class Solution {
    public int minDays(int[] bloomDay, int m, int k) {
        if((long)m*k>bloomDay.length) return -1;
        int low=1 ,high=0;
        for(int i=0;i<bloomDay.length ;i++){
            high=Math.max(high,bloomDay[i]);
        }
         int result = -1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (canMake(bloomDay, m, k, mid)) {
                result = mid;
                high = mid - 1; // try earlier days
            } else {
                low = mid + 1; // wait more
            }
        }

        return result;
    }

    private boolean canMake(int[] bloomDay, int m, int k, int day) {
        int bouquets = 0;
        int flowers = 0;

        for (int bloom : bloomDay) {
            if (bloom <= day) {
                flowers++;
                if (flowers == k) {
                    bouquets++;
                    flowers = 0;
                }
            } else {
                flowers = 0; // streak broken
            }
        }

        return bouquets >= m;
    }
}

        
    
