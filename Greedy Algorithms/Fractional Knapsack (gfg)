class Solution {
    double fractionalKnapsack(int[] values, int[] weights, int W) {
        // code here
            int n = values.length;
        
        // Step 1: Create array of [valuePerWeight, index]
        double[][] items = new double[n][2];
        for (int i = 0; i < n; i++) {
            items[i][0] = (double) values[i] / weights[i]; // ratio
            items[i][1] = i; // original index
        }

        // Step 2: Sort by ratio descending
        Arrays.sort(items, (a, b) -> Double.compare(b[0], a[0]));

        double totalValue = 0.0;
        int capacity = W;

        // Step 3: Pick items
        for (int i = 0; i < n; i++) {
            int idx = (int) items[i][1];
            if (weights[idx] <= capacity) {
                totalValue += values[idx];
                capacity -= weights[idx];
            } else {
                totalValue += items[i][0] * capacity;
                break;
            }
        }

        return totalValue;
    }
}
    
