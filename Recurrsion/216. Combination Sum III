class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        
    List<List<Integer>> result = new ArrayList<>();
        backtrack(1, k, n, new ArrayList<>(), result);
        return result;
    }

    // backtrack(start, k, remainingSum, currentList, result)
    private void backtrack(int start, int k, int target, List<Integer> current, List<List<Integer>> result) {
        if (current.size() == k && target == 0) {
            result.add(new ArrayList<>(current)); //  Valid combination
            return;
        }

        for (int i = start; i <= 9; i++) {
            if (i > target) break; //  Prune unnecessary steps

            current.add(i); //  Choose
            backtrack(i + 1, k, target - i, current, result); //  Recurse with next number
            current.remove(current.size() - 1); //  Backtrack
        }
    }

}
