class Solution {
    public int sumSubarrayMins(int[] arr) {
         int MOD = 1_000_000_007;
    int n = arr.length;
    long result = 0;

    Stack<Integer> stack = new Stack<>();
    int[] prev = new int[n];
    int[] next = new int[n];

    // Find previous smaller element
    for (int i = 0; i < n; i++) {
        while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {
            stack.pop();
        }
        prev[i] = stack.isEmpty() ? -1 : stack.peek();
        stack.push(i);
    }

    // Clear stack for next calculation
    stack.clear();

    // Find next smaller element
    for (int i = n - 1; i >= 0; i--) {
        while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
            stack.pop();
        }
        next[i] = stack.isEmpty() ? n : stack.peek();
        stack.push(i);
    }

    // Calculate the sum
    for (int i = 0; i < n; i++) {
        long count = (i - prev[i]) * (long)(next[i] - i);
        result = (result + arr[i] * count) % MOD;
    }

    return (int) result;
    }
}
