class Solution {
    public int maximalRectangle(char[][] matrix) {
        if (matrix.length == 0 || matrix[0].length == 0) return 0;

        int[] curRow = new int[matrix[0].length];
        int maxAns = 0;

        for (int i = 0; i < matrix.length; i++) {
            // Update current row histogram
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j] == '1') {
                    curRow[j] += 1;
                } else {
                    curRow[j] = 0;
                }
            }

            // Find max area in histogram for current row
            int curAns = largestRectangle(curRow);
            maxAns = Math.max(maxAns, curAns);
        }

        return maxAns;
    }

    // This method is outside maximalRectangle and inside the Solution class
    private int largestRectangle(int[] heights) {
        Stack<Integer> stack = new Stack<>();
        int maxArea = 0;
        int n = heights.length;

        for (int i = 0; i <= n; i++) {
            int currHeight = (i == n) ? 0 : heights[i];
            while (!stack.isEmpty() && currHeight < heights[stack.peek()]) {
                int height = heights[stack.pop()];
                int width = stack.isEmpty() ? i : i - stack.peek() - 1;
                maxArea = Math.max(maxArea, height * width);
            }
            stack.push(i);
        }

        return maxArea;

      } 
    
}
