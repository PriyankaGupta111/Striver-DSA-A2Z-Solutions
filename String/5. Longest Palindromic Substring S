class Solution {
    public String longestPalindrome(String s) {
       if (s == null || s.length() == 0)
            return null;

        String max = String.valueOf(s.charAt(0));

        for (int i = 0; i < s.length(); i++) {
            int l = i - 1;
            int r = i + 1;

            // For odd-length palindromes
            while (l >= 0 && r < s.length() && s.charAt(l) == s.charAt(r)) {
                String subString = s.substring(l, r + 1);
                if (subString.length() > max.length())
                    max = subString;
                l--;
                r++;
            }

            // For even-length palindromes
            l = i;
            r = i + 1;
            while (l >= 0 && r < s.length() && s.charAt(l) == s.charAt(r)) {
                String subString = s.substring(l, r + 1);
                if (subString.length() > max.length())
                    max = subString;
                l--;
                r++;
            }
        }

        return max;
    }
}
