class Solution {
    public int findTargetSumWays(int[] nums, int target) {
         int totalSum = 0;
        for (int num : nums) totalSum += num;

        // Edge case: invalid partition
        if ((target + totalSum) % 2 != 0 || target > totalSum || (target + totalSum) < 0)
            return 0;

        int subsetSum = (target + totalSum) / 2;

        return countSubsetsWithSum(nums, subsetSum);
    }

    private int countSubsetsWithSum(int[] nums, int sum) {
        int n = nums.length;
        int[][] dp = new int[n + 1][sum + 1];

        dp[0][0] = 1; // one way to get 0 sum using 0 elements

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= sum; j++) {
                if (nums[i - 1] <= j)
                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]];
                else
                    dp[i][j] = dp[i - 1][j];
            }
        }

        return dp[n][sum];
    }
}
