class Solution {
    public boolean canPartition(int[] nums) {
          int sum = 0;
        for (int num : nums) sum += num;

        // If odd, cannot partition
        if (sum % 2 != 0) return false;

        return isSubsetSum(nums, sum/2);
    }

    
    public boolean isSubsetSum(int[] arr, int sum) {
        int n = arr.length;
        boolean[][] dp = new boolean[n + 1][sum + 1];

        // Base case: sum = 0 is always true
        for (int i = 0; i <= n; i++) dp[i][0] = true;

        // Fill DP table
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= sum; j++) {
                if (arr[i - 1] <= j)
                    dp[i][j] = dp[i - 1][j] || dp[i - 1][j - arr[i - 1]];
                else
                    dp[i][j] = dp[i - 1][j];
            }
        }

        return dp[n][sum];
    }
}
