class Solution {
    public int coinChange(int[] coins, int amount) {
         int n = coins.length;
        int[][] dp = new int[n + 1][amount + 1];

        // Initialize base cases
        for (int i = 0; i <= n; i++) dp[i][0] = 0; // 0 coins for amount 0

        // Initialize first row (i == 1) â€” only using coins[0]
        for (int j = 1; j <= amount; j++) {
            if (j % coins[0] == 0)
                dp[1][j] = j / coins[0];
            else
                dp[1][j] = Integer.MAX_VALUE - 1;
        }

        // Fill the rest of the DP table
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j <= amount; j++) {
                if (coins[i - 1] <= j) {
                    dp[i][j] = Math.min(
                        dp[i - 1][j],                      // exclude the coin
                        1 + dp[i][j - coins[i - 1]]        // include the coin
                    );
                } else {
                    dp[i][j] = dp[i - 1][j];              // exclude the coin
                }
            }
        }

        return dp[n][amount] == Integer.MAX_VALUE - 1 ? -1 : dp[n][amount];
    }
}
